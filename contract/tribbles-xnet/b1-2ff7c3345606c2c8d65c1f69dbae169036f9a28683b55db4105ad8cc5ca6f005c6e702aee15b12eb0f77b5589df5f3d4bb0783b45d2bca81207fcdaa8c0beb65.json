{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "2ff7c3345606c2c8d65c1f69dbae169036f9a28683b55db4105ad8cc5ca6f005c6e702aee15b12eb0f77b5589df5f3d4bb0783b45d2bca81207fcdaa8c0beb65"
}